def generated_cmake_targets(ctx):
    ctx = ctx.push_directory(ctx, "")
    ctx.set(ctx, "LLVM_ALL_PROJECTS", "clang;libcxx;libcxxabi;lldb;compiler-rt;lld;polly;debuginfo-tests")
    ctx.set(ctx, "LLVM_ENABLE_PROJECTS", "", "CACHE", "STRING", "Semicolon-separated list of projects to build (clang;libcxx;libcxxabi;lldb;compiler-rt;lld;polly;debuginfo-tests), or \"all\".")
    ctx.set(ctx, "LLVM_CCACHE_BUILD", "OFF", "CACHE", "BOOL", "Set to ON for a ccache enabled build")
    ctx.set(ctx, "CMAKE_MODULE_PATH", "", "/root/cmake", "/root/cmake/modules")
    ctx.set(ctx, "CMAKE_EXPORT_COMPILE_COMMANDS", "1")
    ctx.set(ctx, "PACKAGE_NAME", "LLVM")
    ctx.set(ctx, "PACKAGE_STRING", "LLVM ")
    ctx.set(ctx, "PACKAGE_BUGREPORT", "https://bugs.llvm.org/")
    ctx.set(ctx, "BUG_REPORT_URL", "https://bugs.llvm.org/", "CACHE", "STRING", "Default URL where bug reports are to be submitted.")
    ctx.set(ctx, "CPACK_PACKAGE_INSTALL_DIRECTORY", "LLVM")
    ctx.set(ctx, "CPACK_PACKAGE_VENDOR", "LLVM")
    ctx.set(ctx, "CPACK_PACKAGE_VERSION_MAJOR", "")
    ctx.set(ctx, "CPACK_PACKAGE_VERSION_MINOR", "")
    ctx.set(ctx, "CPACK_PACKAGE_VERSION_PATCH", "")
    ctx.set(ctx, "CPACK_PACKAGE_VERSION", "")
    ctx.set(ctx, "CPACK_RESOURCE_FILE_LICENSE", "/root/LICENSE.TXT")
    ctx.set(ctx, "CPACK_NSIS_COMPRESSOR", "/SOLID lzma \r\n SetCompressorDictSize 32")
    ctx.set(ctx, "LLVM_LIBDIR_SUFFIX", "", "CACHE", "STRING", "Define suffix of library directory name (32/64)")
    ctx.set(ctx, "LLVM_TOOLS_INSTALL_DIR", "bin", "CACHE", "STRING", "Path for binary subdirectory (defaults to 'bin')")
    ctx.set(ctx, "LLVM_UTILS_INSTALL_DIR", "bin", "CACHE", "STRING", "Path to install LLVM utilities (enabled by LLVM_INSTALL_UTILS=ON) (defaults to LLVM_TOOLS_INSTALL_DIR)")
    ctx.set(ctx, "LLVM_RUNTIME_OUTPUT_INTDIR", "/root//bin")
    ctx.set(ctx, "LLVM_LIBRARY_OUTPUT_INTDIR", "/root//lib")
    ctx.set(ctx, "LLVM_TOOLS_BINARY_DIR", "/root//bin")
    ctx.set(ctx, "LLVM_LIBRARY_DIR", "/root//lib")
    ctx.set(ctx, "LLVM_MAIN_SRC_DIR", "/root")
    ctx.set(ctx, "LLVM_MAIN_INCLUDE_DIR", "/root/include")
    ctx.set(ctx, "LLVM_BINARY_DIR", "/root")
    ctx.set(ctx, "LLVM_CMAKE_PATH", "/root/cmake/modules")
    ctx.set(ctx, "LLVM_EXAMPLES_BINARY_DIR", "/root/examples")
    ctx.set(ctx, "LLVM_INCLUDE_DIR", "/root/include")
    ctx.set(ctx, "LLVM_ALL_TARGETS", "AArch64", "AMDGPU", "ARM", "BPF", "Hexagon", "Lanai", "Mips", "MSP430", "NVPTX", "PowerPC", "Sparc", "SystemZ", "X86", "XCore")
    ctx.set(ctx, "LLVM_TARGETS_WITH_JIT", "X86", "PowerPC", "AArch64", "ARM", "Mips", "SystemZ")
    ctx.set(ctx, "LLVM_TARGETS_TO_BUILD", "all", "CACHE", "STRING", "Semicolon-separated list of targets to build, or \"all\".")
    ctx.set(ctx, "LLVM_EXPERIMENTAL_TARGETS_TO_BUILD", "", "CACHE", "STRING", "Semicolon-separated list of experimental targets to build.")
    ctx.set(ctx, "FFI_LIBRARY_DIR", "", "CACHE", "PATH", "Additional directory, where CMake should search for libffi.so")
    ctx.set(ctx, "FFI_INCLUDE_DIR", "", "CACHE", "PATH", "Additional directory, where CMake should search for ffi.h or ffi/ffi.h")
    ctx.set(ctx, "LLVM_TARGET_ARCH", "host", "CACHE", "STRING", "Set target to use for LLVM JIT or use \"host\" for automatic detection.")
    ctx.set(ctx, "LLVM_ENABLE_LIBXML2", "ON", "CACHE", "STRING", "Use libxml2 if available. Can be ON, OFF, or FORCE_ON")
    ctx.set(ctx, "LLVM_TARGETS_TO_BUILD", "all", "")
    ctx.set(ctx, "LLVM_ABI_BREAKING_CHECKS", "WITH_ASSERTS", "CACHE", "STRING", "Enable abi-breaking checks.  Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.")
    ctx.set(ctx, "LLVM_USE_SANITIZER", "", "CACHE", "STRING", "Define the sanitizer used to build binaries and tests.")
    ctx.set(ctx, "LLVM_LIB_FUZZING_ENGINE", "", "CACHE", "PATH", "Path to fuzzing library for linking with fuzz targets")
    ctx.set(ctx, "LIT_ARGS_DEFAULT", "-sv")
    ctx.set(ctx, "LLVM_LIT_ARGS", "-sv", "CACHE", "STRING", "Default options for lit")
    ctx.set(ctx, "LLVM_INSTALL_DOXYGEN_HTML_DIR", "share/doc/llvm/doxygen-html", "CACHE", "STRING", "Doxygen-generated HTML documentation install directory")
    ctx.set(ctx, "LLVM_INSTALL_OCAMLDOC_HTML_DIR", "share/doc/llvm/ocaml-html", "CACHE", "STRING", "OCamldoc-generated HTML documentation install directory")
    ctx.set(ctx, "LLVM_BUILD_LLVM_DYLIB_default", "OFF")
    ctx.set(ctx, "LLVM_TARGET_TRIPLE_ENV", "CACHE", "STRING", "The name of environment variable to override default target. Disabled by blank.")
    ctx.set(ctx, "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR", "OFF", "CACHE", "BOOL", "Enable per-target runtimes directory")
    ctx.set(ctx, "LLVM_DEFAULT_TARGET_TRIPLE", "", "CACHE", "STRING", "Default target for which LLVM will generate code.")
    ctx.set(ctx, "TARGET_TRIPLE", "")
    ctx.set(ctx, "Python_ADDITIONAL_VERSIONS", "2.7")
    ctx.set(ctx, "LLVMBUILDTOOL", "/root/utils/llvm-build/llvm-build")
    ctx.set(ctx, "LLVMCONFIGLIBRARYDEPENDENCIESINC", "/root/tools/llvm-config/LibraryDependencies.inc")
    ctx.set(ctx, "LLVMBUILDCMAKEFRAG", "/root/LLVMBuild.cmake")
    ctx.set(ctx, "LLVM_ENUM_TARGETS", "")
    ctx.set(ctx, "LLVM_ENUM_ASM_PRINTERS", "")
    ctx.set(ctx, "LLVM_ENUM_ASM_PARSERS", "")
    ctx.set(ctx, "LLVM_ENUM_DISASSEMBLERS", "")
    ctx.configure_file(ctx, "/root/include/llvm/Config/AsmPrinters.def.in", "/root/include/llvm/Config/AsmPrinters.def")
    ctx.configure_file(ctx, "/root/include/llvm/Config/AsmParsers.def.in", "/root/include/llvm/Config/AsmParsers.def")
    ctx.configure_file(ctx, "/root/include/llvm/Config/Disassemblers.def.in", "/root/include/llvm/Config/Disassemblers.def")
    ctx.configure_file(ctx, "/root/include/llvm/Config/Targets.def.in", "/root/include/llvm/Config/Targets.def")
    ctx.configure_file(ctx, "/root/include/llvm/Config/config.h.cmake", "/root/include/llvm/Config/config.h")
    ctx.configure_file(ctx, "/root/include/llvm/Config/llvm-config.h.cmake", "/root/include/llvm/Config/llvm-config.h")
    ctx.configure_file(ctx, "/root/include/llvm/Config/abi-breaking.h.cmake", "/root/include/llvm/Config/abi-breaking.h")
    ctx.set(ctx, "LLVM_SRPM_USER_BINARY_SPECFILE", "/root/llvm.spec.in", "CACHE", "FILEPATH", ".spec file to use for srpm generation")
    ctx.set(ctx, "LLVM_SRPM_BINARY_SPECFILE", "/root/llvm.spec")
    ctx.set(ctx, "LLVM_SRPM_DIR", "/root/srpm")
    ctx.configure_file(ctx, "/root/llvm.spec.in", "/root/llvm.spec", "@ONLY")
    ctx.set(ctx, "CMAKE_RUNTIME_OUTPUT_DIRECTORY", "/root/bin")
    ctx.set(ctx, "CMAKE_LIBRARY_OUTPUT_DIRECTORY", "/root/lib")
    ctx.set(ctx, "CMAKE_ARCHIVE_OUTPUT_DIRECTORY", "/root/lib")
    ctx.set(ctx, "CMAKE_INCLUDE_CURRENT_DIR", "ON")
    ctx.set(ctx, "CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS", "")
    ctx.set(ctx, "LLVM_PROFDATA_FILE", "", "CACHE", "FILEPATH", "Profiling data file to use when compiling in order to improve runtime performance.")
    ctx = ctx.push_directory(ctx, "lib/Demangle")
    ctx.add_llvm_library(ctx, "LLVMDemangle", "ItaniumDemangle.cpp", "MicrosoftDemangle.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Demangle")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "lib/Support")
    ctx.set(ctx, "system_libs")
    ctx.add_llvm_library(ctx, "LLVMSupport", "AMDGPUMetadata.cpp", "APFloat.cpp", "APInt.cpp", "APSInt.cpp", "ARMBuildAttrs.cpp", "ARMAttributeParser.cpp", "ARMWinEH.cpp", "Allocator.cpp", "BinaryStreamError.cpp", "BinaryStreamReader.cpp", "BinaryStreamRef.cpp", "BinaryStreamWriter.cpp", "BlockFrequency.cpp", "BranchProbability.cpp", "CachePruning.cpp", "circular_raw_ostream.cpp", "Chrono.cpp", "COM.cpp", "CodeGenCoverage.cpp", "CommandLine.cpp", "Compression.cpp", "ConvertUTF.cpp", "ConvertUTFWrapper.cpp", "CrashRecoveryContext.cpp", "DataExtractor.cpp", "Debug.cpp", "DebugCounter.cpp", "DeltaAlgorithm.cpp", "DAGDeltaAlgorithm.cpp", "DJB.cpp", "Error.cpp", "ErrorHandling.cpp", "FileUtilities.cpp", "FileOutputBuffer.cpp", "FoldingSet.cpp", "FormattedStream.cpp", "FormatVariadic.cpp", "GlobPattern.cpp", "GraphWriter.cpp", "Hashing.cpp", "InitLLVM.cpp", "IntEqClasses.cpp", "IntervalMap.cpp", "JamCRC.cpp", "JSON.cpp", "KnownBits.cpp", "LEB128.cpp", "LineIterator.cpp", "Locale.cpp", "LockFileManager.cpp", "LowLevelType.cpp", "ManagedStatic.cpp", "MathExtras.cpp", "MemoryBuffer.cpp", "MD5.cpp", "NativeFormatting.cpp", "Options.cpp", "Parallel.cpp", "PluginLoader.cpp", "PrettyStackTrace.cpp", "RandomNumberGenerator.cpp", "Regex.cpp", "ScaledNumber.cpp", "ScopedPrinter.cpp", "SHA1.cpp", "SmallPtrSet.cpp", "SmallVector.cpp", "SourceMgr.cpp", "SpecialCaseList.cpp", "Statistic.cpp", "StringExtras.cpp", "StringMap.cpp", "StringPool.cpp", "StringSaver.cpp", "StringRef.cpp", "SystemUtils.cpp", "TarWriter.cpp", "TargetParser.cpp", "ThreadPool.cpp", "Timer.cpp", "ToolOutputFile.cpp", "TrigramIndex.cpp", "Triple.cpp", "Twine.cpp", "Unicode.cpp", "UnicodeCaseFold.cpp", "VersionTuple.cpp", "WithColor.cpp", "YAMLParser.cpp", "YAMLTraits.cpp", "raw_os_ostream.cpp", "raw_ostream.cpp", "regcomp.c", "regerror.c", "regexec.c", "regfree.c", "regstrlcpy.c", "xxhash.cpp", "Atomic.cpp", "DynamicLibrary.cpp", "Errno.cpp", "Host.cpp", "Memory.cpp", "Mutex.cpp", "Path.cpp", "Process.cpp", "Program.cpp", "RWMutex.cpp", "Signals.cpp", "TargetRegistry.cpp", "ThreadLocal.cpp", "Threading.cpp", "Valgrind.cpp", "Watchdog.cpp", "ADDITIONAL_HEADER_DIRS", "Unix", "Windows", "/root/include/llvm/ADT", "/root/include/llvm/Support", "", "LINK_LIBS", "")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "lib/TableGen")
    ctx.add_llvm_library(ctx, "LLVMTableGen", "Error.cpp", "JSONBackend.cpp", "Main.cpp", "Record.cpp", "SetTheory.cpp", "StringMatcher.cpp", "TableGenBackend.cpp", "TGLexer.cpp", "TGParser.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/TableGen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "utils/TableGen")
    ctx.set(ctx, "LLVM_LINK_COMPONENTS", "Support")
    ctx.add_tablegen(ctx, "llvm-tblgen", "LLVM", "AsmMatcherEmitter.cpp", "AsmWriterEmitter.cpp", "AsmWriterInst.cpp", "Attributes.cpp", "CallingConvEmitter.cpp", "CodeEmitterGen.cpp", "CodeGenDAGPatterns.cpp", "CodeGenHwModes.cpp", "CodeGenInstruction.cpp", "CodeGenMapTable.cpp", "CodeGenRegisters.cpp", "CodeGenSchedule.cpp", "CodeGenTarget.cpp", "DAGISelEmitter.cpp", "DAGISelMatcherEmitter.cpp", "DAGISelMatcherGen.cpp", "DAGISelMatcherOpt.cpp", "DAGISelMatcher.cpp", "DFAPacketizerEmitter.cpp", "DisassemblerEmitter.cpp", "FastISelEmitter.cpp", "FixedLenDecoderEmitter.cpp", "GlobalISelEmitter.cpp", "InfoByHwMode.cpp", "InstrInfoEmitter.cpp", "InstrDocsEmitter.cpp", "IntrinsicEmitter.cpp", "OptParserEmitter.cpp", "PredicateExpander.cpp", "PseudoLoweringEmitter.cpp", "RISCVCompressInstEmitter.cpp", "RegisterBankEmitter.cpp", "RegisterInfoEmitter.cpp", "SDNodeProperties.cpp", "SearchableTableEmitter.cpp", "SubtargetEmitter.cpp", "SubtargetFeatureInfo.cpp", "TableGen.cpp", "Types.cpp", "X86DisassemblerTables.cpp", "X86EVEX2VEXTablesEmitter.cpp", "X86FoldTablesEmitter.cpp", "X86ModRMFilters.cpp", "X86RecognizableInstr.cpp", "WebAssemblyDisassemblerEmitter.cpp", "CTagsEmitter.cpp")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "include/llvm")
    ctx = ctx.push_directory(ctx, "IR")
    ctx.set(ctx, "LLVM_TARGET_DEFINITIONS", "Attributes.td")
    ctx.tablegen(ctx, "LLVM", "Attributes.inc", "-gen-attrs")
    ctx.set(ctx, "LLVM_TARGET_DEFINITIONS", "Intrinsics.td")
    ctx.tablegen(ctx, "LLVM", "IntrinsicEnums.inc", "-gen-intrinsic-enums")
    ctx.tablegen(ctx, "LLVM", "IntrinsicImpl.inc", "-gen-intrinsic-impl")
    ctx.add_public_tablegen_target(ctx, "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Support")
    ctx.set(ctx, "version_inc", "/root/include/llvm/Support/VCSRevision.h")
    ctx.set(ctx, "get_svn_script", "/root/cmake/modules/GenerateVersionFromCVS.cmake")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "lib")
    ctx = ctx.push_directory(ctx, "IR")
    ctx.set(ctx, "LLVM_TARGET_DEFINITIONS", "AttributesCompatFunc.td")
    ctx.tablegen(ctx, "LLVM", "AttributesCompatFunc.inc", "-gen-attrs")
    ctx.add_public_tablegen_target(ctx, "AttributeCompatFuncTableGen")
    ctx.add_llvm_library(ctx, "LLVMCore", "AsmWriter.cpp", "Attributes.cpp", "AutoUpgrade.cpp", "BasicBlock.cpp", "Comdat.cpp", "ConstantFold.cpp", "ConstantRange.cpp", "Constants.cpp", "Core.cpp", "DIBuilder.cpp", "DataLayout.cpp", "DebugInfo.cpp", "DebugInfoMetadata.cpp", "DebugLoc.cpp", "DiagnosticHandler.cpp", "DiagnosticInfo.cpp", "DiagnosticPrinter.cpp", "Dominators.cpp", "DomTreeUpdater.cpp", "Function.cpp", "GVMaterializer.cpp", "Globals.cpp", "IRBuilder.cpp", "IRPrintingPasses.cpp", "InlineAsm.cpp", "Instruction.cpp", "Instructions.cpp", "IntrinsicInst.cpp", "LLVMContext.cpp", "LLVMContextImpl.cpp", "LegacyPassManager.cpp", "MDBuilder.cpp", "Mangler.cpp", "Metadata.cpp", "Module.cpp", "ModuleSummaryIndex.cpp", "Operator.cpp", "OptBisect.cpp", "Pass.cpp", "PassManager.cpp", "PassRegistry.cpp", "SafepointIRVerifier.cpp", "ProfileSummary.cpp", "Statepoint.cpp", "Type.cpp", "TypeFinder.cpp", "Use.cpp", "User.cpp", "Value.cpp", "ValueSymbolTable.cpp", "Verifier.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/IR", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "FuzzMutate")
    ctx.add_llvm_library(ctx, "LLVMFuzzMutate", "FuzzerCLI.cpp", "IRMutator.cpp", "OpDescriptor.cpp", "Operations.cpp", "RandomIRBuilder.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/FuzzMutate", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "IRReader")
    ctx.add_llvm_library(ctx, "LLVMIRReader", "IRReader.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/IRReader", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "CodeGen")
    ctx.add_llvm_library(ctx, "LLVMCodeGen", "AggressiveAntiDepBreaker.cpp", "AllocationOrder.cpp", "Analysis.cpp", "AtomicExpandPass.cpp", "BasicTargetTransformInfo.cpp", "BranchFolding.cpp", "BranchRelaxation.cpp", "BreakFalseDeps.cpp", "BuiltinGCs.cpp", "CalcSpillWeights.cpp", "CallingConvLower.cpp", "CFIInstrInserter.cpp", "CodeGen.cpp", "CodeGenPrepare.cpp", "CriticalAntiDepBreaker.cpp", "DeadMachineInstructionElim.cpp", "DetectDeadLanes.cpp", "DFAPacketizer.cpp", "DwarfEHPrepare.cpp", "EarlyIfConversion.cpp", "EdgeBundles.cpp", "ExecutionDomainFix.cpp", "ExpandISelPseudos.cpp", "ExpandMemCmp.cpp", "ExpandPostRAPseudos.cpp", "ExpandReductions.cpp", "FaultMaps.cpp", "FEntryInserter.cpp", "FuncletLayout.cpp", "GCMetadata.cpp", "GCMetadataPrinter.cpp", "GCRootLowering.cpp", "GCStrategy.cpp", "GlobalMerge.cpp", "IfConversion.cpp", "ImplicitNullChecks.cpp", "IndirectBrExpandPass.cpp", "InlineSpiller.cpp", "InterferenceCache.cpp", "InterleavedAccessPass.cpp", "IntrinsicLowering.cpp", "LatencyPriorityQueue.cpp", "LazyMachineBlockFrequencyInfo.cpp", "LexicalScopes.cpp", "LiveDebugValues.cpp", "LiveDebugVariables.cpp", "LiveIntervals.cpp", "LiveInterval.cpp", "LiveIntervalUnion.cpp", "LivePhysRegs.cpp", "LiveRangeCalc.cpp", "LiveRangeEdit.cpp", "LiveRangeShrink.cpp", "LiveRegMatrix.cpp", "LiveRegUnits.cpp", "LiveStacks.cpp", "LiveVariables.cpp", "LLVMTargetMachine.cpp", "LocalStackSlotAllocation.cpp", "LoopTraversal.cpp", "LowLevelType.cpp", "LowerEmuTLS.cpp", "MachineBasicBlock.cpp", "MachineBlockFrequencyInfo.cpp", "MachineBlockPlacement.cpp", "MachineBranchProbabilityInfo.cpp", "MachineCombiner.cpp", "MachineCopyPropagation.cpp", "MachineCSE.cpp", "MachineDominanceFrontier.cpp", "MachineDominators.cpp", "MachineFrameInfo.cpp", "MachineFunction.cpp", "MachineFunctionPass.cpp", "MachineFunctionPrinterPass.cpp", "MachineInstrBundle.cpp", "MachineInstr.cpp", "MachineLICM.cpp", "MachineLoopInfo.cpp", "MachineModuleInfo.cpp", "MachineModuleInfoImpls.cpp", "MachineOperand.cpp", "MachineOptimizationRemarkEmitter.cpp", "MachineOutliner.cpp", "MachinePassRegistry.cpp", "MachinePipeliner.cpp", "MachinePostDominators.cpp", "MachineRegionInfo.cpp", "MachineRegisterInfo.cpp", "MachineScheduler.cpp", "MachineSink.cpp", "MachineSSAUpdater.cpp", "MachineTraceMetrics.cpp", "MachineVerifier.cpp", "PatchableFunction.cpp", "MIRPrinter.cpp", "MIRPrintingPass.cpp", "MacroFusion.cpp", "OptimizePHIs.cpp", "ParallelCG.cpp", "PeepholeOptimizer.cpp", "PHIElimination.cpp", "PHIEliminationUtils.cpp", "PostRAHazardRecognizer.cpp", "PostRASchedulerList.cpp", "PreISelIntrinsicLowering.cpp", "ProcessImplicitDefs.cpp", "PrologEpilogInserter.cpp", "PseudoSourceValue.cpp", "ReachingDefAnalysis.cpp", "RegAllocBase.cpp", "RegAllocBasic.cpp", "RegAllocFast.cpp", "RegAllocGreedy.cpp", "RegAllocPBQP.cpp", "RegisterClassInfo.cpp", "RegisterCoalescer.cpp", "RegisterPressure.cpp", "RegisterScavenging.cpp", "RenameIndependentSubregs.cpp", "MIRCanonicalizerPass.cpp", "RegisterUsageInfo.cpp", "RegUsageInfoCollector.cpp", "RegUsageInfoPropagate.cpp", "ResetMachineFunctionPass.cpp", "SafeStack.cpp", "SafeStackColoring.cpp", "SafeStackLayout.cpp", "ScalarizeMaskedMemIntrin.cpp", "ScheduleDAG.cpp", "ScheduleDAGInstrs.cpp", "ScheduleDAGPrinter.cpp", "ScoreboardHazardRecognizer.cpp", "ShadowStackGCLowering.cpp", "ShrinkWrap.cpp", "SjLjEHPrepare.cpp", "SlotIndexes.cpp", "SpillPlacement.cpp", "SplitKit.cpp", "StackColoring.cpp", "StackMapLivenessAnalysis.cpp", "StackMaps.cpp", "StackProtector.cpp", "StackSlotColoring.cpp", "TailDuplication.cpp", "TailDuplicator.cpp", "TargetFrameLoweringImpl.cpp", "TargetInstrInfo.cpp", "TargetLoweringBase.cpp", "TargetLoweringObjectFileImpl.cpp", "TargetOptionsImpl.cpp", "TargetPassConfig.cpp", "TargetRegisterInfo.cpp", "TargetSchedule.cpp", "TargetSubtargetInfo.cpp", "TwoAddressInstructionPass.cpp", "UnreachableBlockElim.cpp", "ValueTypes.cpp", "VirtRegMap.cpp", "WasmEHPrepare.cpp", "WinEHPrepare.cpp", "XRayInstrumentation.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/CodeGen", "/root/include/llvm/CodeGen/PBQP", "LINK_LIBS", "", "DEPENDS", "intrinsics_gen")
    ctx = ctx.push_directory(ctx, "SelectionDAG")
    ctx.add_llvm_library(ctx, "LLVMSelectionDAG", "DAGCombiner.cpp", "FastISel.cpp", "FunctionLoweringInfo.cpp", "InstrEmitter.cpp", "LegalizeDAG.cpp", "LegalizeFloatTypes.cpp", "LegalizeIntegerTypes.cpp", "LegalizeTypes.cpp", "LegalizeTypesGeneric.cpp", "LegalizeVectorOps.cpp", "LegalizeVectorTypes.cpp", "ResourcePriorityQueue.cpp", "ScheduleDAGFast.cpp", "ScheduleDAGRRList.cpp", "ScheduleDAGSDNodes.cpp", "ScheduleDAGVLIW.cpp", "SelectionDAGBuilder.cpp", "SelectionDAG.cpp", "SelectionDAGAddressAnalysis.cpp", "SelectionDAGDumper.cpp", "SelectionDAGISel.cpp", "SelectionDAGPrinter.cpp", "SelectionDAGTargetInfo.cpp", "StatepointLowering.cpp", "TargetLowering.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "AsmPrinter")
    ctx.add_llvm_library(ctx, "LLVMAsmPrinter", "AccelTable.cpp", "AddressPool.cpp", "ARMException.cpp", "AsmPrinter.cpp", "AsmPrinterDwarf.cpp", "AsmPrinterInlineAsm.cpp", "DbgValueHistoryCalculator.cpp", "DebugHandlerBase.cpp", "DebugLocStream.cpp", "DIE.cpp", "DIEHash.cpp", "DwarfCFIException.cpp", "DwarfCompileUnit.cpp", "DwarfDebug.cpp", "DwarfExpression.cpp", "DwarfFile.cpp", "DwarfStringPool.cpp", "DwarfUnit.cpp", "EHStreamer.cpp", "ErlangGCPrinter.cpp", "OcamlGCPrinter.cpp", "WinCFGuard.cpp", "WinException.cpp", "CodeViewDebug.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "MIRParser")
    ctx.add_llvm_library(ctx, "LLVMMIRParser", "MILexer.cpp", "MIParser.cpp", "MIRParser.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "GlobalISel")
    ctx.add_llvm_library(ctx, "LLVMGlobalISel", "CallLowering.cpp", "GlobalISel.cpp", "Combiner.cpp", "CombinerHelper.cpp", "IRTranslator.cpp", "InstructionSelect.cpp", "InstructionSelector.cpp", "LegalityPredicates.cpp", "LegalizeMutations.cpp", "Legalizer.cpp", "LegalizerHelper.cpp", "LegalizerInfo.cpp", "Localizer.cpp", "MachineIRBuilder.cpp", "RegBankSelect.cpp", "RegisterBank.cpp", "RegisterBankInfo.cpp", "Utils.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "BinaryFormat")
    ctx.add_llvm_library(ctx, "LLVMBinaryFormat", "Dwarf.cpp", "Magic.cpp", "Wasm.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/BinaryFormat")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Bitcode")
    ctx = ctx.push_directory(ctx, "Reader")
    ctx.add_llvm_library(ctx, "LLVMBitReader", "BitReader.cpp", "BitcodeReader.cpp", "BitstreamReader.cpp", "MetadataLoader.cpp", "ValueList.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Bitcode", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Writer")
    ctx.add_llvm_library(ctx, "LLVMBitWriter", "BitWriter.cpp", "BitcodeWriter.cpp", "BitcodeWriterPass.cpp", "ValueEnumerator.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Transforms")
    ctx = ctx.push_directory(ctx, "Utils")
    ctx.add_llvm_library(ctx, "LLVMTransformUtils", "ASanStackFrameLayout.cpp", "AddDiscriminators.cpp", "BasicBlockUtils.cpp", "BreakCriticalEdges.cpp", "BuildLibCalls.cpp", "BypassSlowDivision.cpp", "CallPromotionUtils.cpp", "CloneFunction.cpp", "CloneModule.cpp", "CodeExtractor.cpp", "CtorUtils.cpp", "DemoteRegToStack.cpp", "EntryExitInstrumenter.cpp", "EscapeEnumerator.cpp", "Evaluator.cpp", "FlattenCFG.cpp", "FunctionComparator.cpp", "FunctionImportUtils.cpp", "GlobalStatus.cpp", "InlineFunction.cpp", "ImportedFunctionsInliningStatistics.cpp", "InstructionNamer.cpp", "IntegerDivision.cpp", "LCSSA.cpp", "LibCallsShrinkWrap.cpp", "Local.cpp", "LoopRotationUtils.cpp", "LoopSimplify.cpp", "LoopUnroll.cpp", "LoopUnrollAndJam.cpp", "LoopUnrollPeel.cpp", "LoopUnrollRuntime.cpp", "LoopUtils.cpp", "LoopVersioning.cpp", "LowerInvoke.cpp", "LowerMemIntrinsics.cpp", "LowerSwitch.cpp", "Mem2Reg.cpp", "MetaRenamer.cpp", "ModuleUtils.cpp", "NameAnonGlobals.cpp", "OrderedInstructions.cpp", "PredicateInfo.cpp", "PromoteMemoryToRegister.cpp", "StripGCRelocates.cpp", "SSAUpdater.cpp", "SSAUpdaterBulk.cpp", "SanitizerStats.cpp", "SimplifyCFG.cpp", "SimplifyIndVar.cpp", "SimplifyLibCalls.cpp", "SplitModule.cpp", "StripNonLineTableDebugInfo.cpp", "SymbolRewriter.cpp", "UnifyFunctionExitNodes.cpp", "Utils.cpp", "ValueMapper.cpp", "VNCoercion.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "/root/include/llvm/Transforms/Utils", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Instrumentation")
    ctx.add_llvm_library(ctx, "LLVMInstrumentation", "AddressSanitizer.cpp", "BoundsChecking.cpp", "CGProfile.cpp", "DataFlowSanitizer.cpp", "GCOVProfiling.cpp", "MemorySanitizer.cpp", "IndirectCallPromotion.cpp", "Instrumentation.cpp", "InstrProfiling.cpp", "PGOInstrumentation.cpp", "PGOMemOPSizeOpt.cpp", "SanitizerCoverage.cpp", "ThreadSanitizer.cpp", "EfficiencySanitizer.cpp", "HWAddressSanitizer.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "AggressiveInstCombine")
    ctx.add_llvm_library(ctx, "LLVMAggressiveInstCombine", "AggressiveInstCombine.cpp", "TruncInstCombine.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "/root/include/llvm/Transforms/AggressiveInstCombine", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "InstCombine")
    ctx.set(ctx, "LLVM_TARGET_DEFINITIONS", "InstCombineTables.td")
    ctx.tablegen(ctx, "LLVM", "InstCombineTables.inc", "-gen-searchable-tables")
    ctx.add_public_tablegen_target(ctx, "InstCombineTableGen")
    ctx.add_llvm_library(ctx, "LLVMInstCombine", "InstructionCombining.cpp", "InstCombineAddSub.cpp", "InstCombineAndOrXor.cpp", "InstCombineCalls.cpp", "InstCombineCasts.cpp", "InstCombineCompares.cpp", "InstCombineLoadStoreAlloca.cpp", "InstCombineMulDivRem.cpp", "InstCombinePHI.cpp", "InstCombineSelect.cpp", "InstCombineShifts.cpp", "InstCombineSimplifyDemanded.cpp", "InstCombineVectorOps.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "/root/include/llvm/Transforms/InstCombine", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Scalar")
    ctx.add_llvm_library(ctx, "LLVMScalarOpts", "ADCE.cpp", "AlignmentFromAssumptions.cpp", "BDCE.cpp", "CallSiteSplitting.cpp", "ConstantHoisting.cpp", "ConstantProp.cpp", "CorrelatedValuePropagation.cpp", "DCE.cpp", "DeadStoreElimination.cpp", "DivRemPairs.cpp", "EarlyCSE.cpp", "FlattenCFGPass.cpp", "Float2Int.cpp", "GuardWidening.cpp", "GVN.cpp", "GVNHoist.cpp", "GVNSink.cpp", "IVUsersPrinter.cpp", "InductiveRangeCheckElimination.cpp", "IndVarSimplify.cpp", "InferAddressSpaces.cpp", "InstSimplifyPass.cpp", "JumpThreading.cpp", "LICM.cpp", "LoopAccessAnalysisPrinter.cpp", "LoopSink.cpp", "LoopDeletion.cpp", "LoopDataPrefetch.cpp", "LoopDistribute.cpp", "LoopIdiomRecognize.cpp", "LoopInstSimplify.cpp", "LoopInterchange.cpp", "LoopLoadElimination.cpp", "LoopPassManager.cpp", "LoopPredication.cpp", "LoopRerollPass.cpp", "LoopRotation.cpp", "LoopSimplifyCFG.cpp", "LoopStrengthReduce.cpp", "LoopUnrollPass.cpp", "LoopUnrollAndJamPass.cpp", "LoopUnswitch.cpp", "LoopVersioningLICM.cpp", "LowerAtomic.cpp", "LowerExpectIntrinsic.cpp", "LowerGuardIntrinsic.cpp", "MemCpyOptimizer.cpp", "MergeICmps.cpp", "MergedLoadStoreMotion.cpp", "NaryReassociate.cpp", "NewGVN.cpp", "PartiallyInlineLibCalls.cpp", "PlaceSafepoints.cpp", "Reassociate.cpp", "Reg2Mem.cpp", "RewriteStatepointsForGC.cpp", "SCCP.cpp", "SROA.cpp", "Scalar.cpp", "Scalarizer.cpp", "SeparateConstOffsetFromGEP.cpp", "SimpleLoopUnswitch.cpp", "SimplifyCFGPass.cpp", "Sink.cpp", "SpeculativeExecution.cpp", "SpeculateAroundPHIs.cpp", "StraightLineStrengthReduce.cpp", "StructurizeCFG.cpp", "TailRecursionElimination.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "/root/include/llvm/Transforms/Scalar", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "IPO")
    ctx.add_llvm_library(ctx, "LLVMipo", "AlwaysInliner.cpp", "ArgumentPromotion.cpp", "BarrierNoopPass.cpp", "BlockExtractor.cpp", "CalledValuePropagation.cpp", "ConstantMerge.cpp", "CrossDSOCFI.cpp", "DeadArgumentElimination.cpp", "ElimAvailExtern.cpp", "ExtractGV.cpp", "ForceFunctionAttrs.cpp", "FunctionAttrs.cpp", "FunctionImport.cpp", "GlobalDCE.cpp", "GlobalOpt.cpp", "GlobalSplit.cpp", "IPConstantPropagation.cpp", "IPO.cpp", "InferFunctionAttrs.cpp", "InlineSimple.cpp", "Inliner.cpp", "Internalize.cpp", "LoopExtractor.cpp", "LowerTypeTests.cpp", "MergeFunctions.cpp", "PartialInlining.cpp", "PassManagerBuilder.cpp", "PruneEH.cpp", "SampleProfile.cpp", "SCCP.cpp", "StripDeadPrototypes.cpp", "StripSymbols.cpp", "SyntheticCountsPropagation.cpp", "ThinLTOBitcodeWriter.cpp", "WholeProgramDevirt.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "/root/include/llvm/Transforms/IPO", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Vectorize")
    ctx.add_llvm_library(ctx, "LLVMVectorize", "LoadStoreVectorizer.cpp", "LoopVectorizationLegality.cpp", "LoopVectorize.cpp", "SLPVectorizer.cpp", "Vectorize.cpp", "VPlan.cpp", "VPlanHCFGBuilder.cpp", "VPlanHCFGTransforms.cpp", "VPlanVerifier.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "ObjCARC")
    ctx.add_llvm_library(ctx, "LLVMObjCARCOpts", "ObjCARC.cpp", "ObjCARCOpts.cpp", "ObjCARCExpand.cpp", "ObjCARCAPElim.cpp", "ObjCARCContract.cpp", "DependencyAnalysis.cpp", "ProvenanceAnalysis.cpp", "ProvenanceAnalysisEvaluator.cpp", "PtrState.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Transforms", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Coroutines")
    ctx.add_llvm_library(ctx, "LLVMCoroutines", "Coroutines.cpp", "CoroCleanup.cpp", "CoroEarly.cpp", "CoroElide.cpp", "CoroFrame.cpp", "CoroSplit.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Linker")
    ctx.add_llvm_library(ctx, "LLVMLinker", "IRMover.cpp", "LinkModules.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Linker", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Analysis")
    ctx.add_llvm_library(ctx, "LLVMAnalysis", "AliasAnalysis.cpp", "AliasAnalysisEvaluator.cpp", "AliasAnalysisSummary.cpp", "AliasSetTracker.cpp", "Analysis.cpp", "AssumptionCache.cpp", "BasicAliasAnalysis.cpp", "BlockFrequencyInfo.cpp", "BlockFrequencyInfoImpl.cpp", "BranchProbabilityInfo.cpp", "CFG.cpp", "CFGPrinter.cpp", "CFLAndersAliasAnalysis.cpp", "CFLSteensAliasAnalysis.cpp", "CGSCCPassManager.cpp", "CallGraph.cpp", "CallGraphSCCPass.cpp", "CallPrinter.cpp", "CaptureTracking.cpp", "CmpInstAnalysis.cpp", "CostModel.cpp", "CodeMetrics.cpp", "ConstantFolding.cpp", "Delinearization.cpp", "DemandedBits.cpp", "DependenceAnalysis.cpp", "DivergenceAnalysis.cpp", "DomPrinter.cpp", "DominanceFrontier.cpp", "EHPersonalities.cpp", "GlobalsModRef.cpp", "IVUsers.cpp", "IndirectCallPromotionAnalysis.cpp", "InlineCost.cpp", "InstCount.cpp", "InstructionSimplify.cpp", "Interval.cpp", "IntervalPartition.cpp", "IteratedDominanceFrontier.cpp", "LazyBranchProbabilityInfo.cpp", "LazyBlockFrequencyInfo.cpp", "LazyCallGraph.cpp", "LazyValueInfo.cpp", "Lint.cpp", "Loads.cpp", "LoopAccessAnalysis.cpp", "LoopAnalysisManager.cpp", "LoopUnrollAnalyzer.cpp", "LoopInfo.cpp", "LoopPass.cpp", "MemDepPrinter.cpp", "MemDerefPrinter.cpp", "MemoryBuiltins.cpp", "MemoryDependenceAnalysis.cpp", "MemoryLocation.cpp", "MemorySSA.cpp", "MemorySSAUpdater.cpp", "ModuleDebugInfoPrinter.cpp", "ModuleSummaryAnalysis.cpp", "MustExecute.cpp", "ObjCARCAliasAnalysis.cpp", "ObjCARCAnalysisUtils.cpp", "ObjCARCInstKind.cpp", "OptimizationRemarkEmitter.cpp", "OrderedBasicBlock.cpp", "PHITransAddr.cpp", "PhiValues.cpp", "PostDominators.cpp", "ProfileSummaryInfo.cpp", "PtrUseVisitor.cpp", "RegionInfo.cpp", "RegionPass.cpp", "RegionPrinter.cpp", "ScalarEvolution.cpp", "ScalarEvolutionAliasAnalysis.cpp", "ScalarEvolutionExpander.cpp", "ScalarEvolutionNormalization.cpp", "SyntheticCountsUtils.cpp", "TargetLibraryInfo.cpp", "TargetTransformInfo.cpp", "Trace.cpp", "TypeBasedAliasAnalysis.cpp", "TypeMetadataUtils.cpp", "ScopedNoAliasAA.cpp", "ValueLattice.cpp", "ValueLatticeUtils.cpp", "ValueTracking.cpp", "VectorUtils.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Analysis", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "LTO")
    ctx.add_llvm_library(ctx, "LLVMLTO", "Caching.cpp", "LTO.cpp", "LTOBackend.cpp", "LTOModule.cpp", "LTOCodeGenerator.cpp", "UpdateCompilerUsed.cpp", "ThinLTOCodeGenerator.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/LTO", "DEPENDS", "intrinsics_gen", "llvm_vcsrevision_h")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "MC")
    ctx.add_llvm_library(ctx, "LLVMMC", "ConstantPools.cpp", "ELFObjectWriter.cpp", "MCAsmBackend.cpp", "MCAsmInfo.cpp", "MCAsmInfoCOFF.cpp", "MCAsmInfoDarwin.cpp", "MCAsmInfoELF.cpp", "MCAsmInfoWasm.cpp", "MCAsmMacro.cpp", "MCAsmStreamer.cpp", "MCAssembler.cpp", "MCCodeEmitter.cpp", "MCCodePadder.cpp", "MCCodeView.cpp", "MCContext.cpp", "MCDwarf.cpp", "MCELFObjectTargetWriter.cpp", "MCELFStreamer.cpp", "MCExpr.cpp", "MCFragment.cpp", "MCInst.cpp", "MCInstPrinter.cpp", "MCInstrAnalysis.cpp", "MCInstrDesc.cpp", "MCLabel.cpp", "MCLinkerOptimizationHint.cpp", "MCMachOStreamer.cpp", "MCMachObjectTargetWriter.cpp", "MCNullStreamer.cpp", "MCObjectFileInfo.cpp", "MCObjectStreamer.cpp", "MCObjectWriter.cpp", "MCRegisterInfo.cpp", "MCSchedule.cpp", "MCSection.cpp", "MCSectionCOFF.cpp", "MCSectionELF.cpp", "MCSectionMachO.cpp", "MCSectionWasm.cpp", "MCStreamer.cpp", "MCSubtargetInfo.cpp", "MCSymbol.cpp", "MCSymbolELF.cpp", "MCTargetOptions.cpp", "MCValue.cpp", "MCWasmObjectTargetWriter.cpp", "MCWasmStreamer.cpp", "MCWin64EH.cpp", "MCWinCOFFStreamer.cpp", "MCWinEH.cpp", "MachObjectWriter.cpp", "StringTableBuilder.cpp", "SubtargetFeature.cpp", "WasmObjectWriter.cpp", "WinCOFFObjectWriter.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/MC")
    ctx = ctx.push_directory(ctx, "MCParser")
    ctx.add_llvm_library(ctx, "LLVMMCParser", "AsmLexer.cpp", "AsmParser.cpp", "COFFAsmParser.cpp", "DarwinAsmParser.cpp", "ELFAsmParser.cpp", "MCAsmLexer.cpp", "MCAsmParser.cpp", "MCAsmParserExtension.cpp", "MCTargetAsmParser.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/MC/MCParser")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "MCDisassembler")
    ctx.add_llvm_library(ctx, "LLVMMCDisassembler", "Disassembler.cpp", "MCDisassembler.cpp", "MCExternalSymbolizer.cpp", "MCRelocationInfo.cpp", "MCSymbolizer.cpp")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Object")
    ctx.add_llvm_library(ctx, "LLVMObject", "Archive.cpp", "ArchiveWriter.cpp", "Binary.cpp", "COFFImportFile.cpp", "COFFModuleDefinition.cpp", "COFFObjectFile.cpp", "Decompressor.cpp", "ELF.cpp", "ELFObjectFile.cpp", "Error.cpp", "IRObjectFile.cpp", "IRSymtab.cpp", "MachOObjectFile.cpp", "MachOUniversal.cpp", "ModuleSymbolTable.cpp", "Object.cpp", "ObjectFile.cpp", "RecordStreamer.cpp", "SymbolicFile.cpp", "SymbolSize.cpp", "WasmObjectFile.cpp", "WindowsResource.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Object", "DEPENDS", "intrinsics_gen", "llvm_vcsrevision_h")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "ObjectYAML")
    ctx.add_llvm_library(ctx, "LLVMObjectYAML", "CodeViewYAMLDebugSections.cpp", "CodeViewYAMLSymbols.cpp", "CodeViewYAMLTypeHashing.cpp", "CodeViewYAMLTypes.cpp", "COFFYAML.cpp", "DWARFEmitter.cpp", "DWARFVisitor.cpp", "DWARFYAML.cpp", "ELFYAML.cpp", "MachOYAML.cpp", "ObjectYAML.cpp", "WasmYAML.cpp", "YAML.cpp")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Option")
    ctx.add_llvm_library(ctx, "LLVMOption", "Arg.cpp", "ArgList.cpp", "Option.cpp", "OptTable.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Option")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "DebugInfo")
    ctx = ctx.push_directory(ctx, "DWARF")
    ctx.add_llvm_library(ctx, "LLVMDebugInfoDWARF", "DWARFAbbreviationDeclaration.cpp", "DWARFAddressRange.cpp", "DWARFAcceleratorTable.cpp", "DWARFCompileUnit.cpp", "DWARFContext.cpp", "DWARFDataExtractor.cpp", "DWARFDebugAbbrev.cpp", "DWARFDebugAddr.cpp", "DWARFDebugArangeSet.cpp", "DWARFDebugAranges.cpp", "DWARFDebugFrame.cpp", "DWARFDebugInfoEntry.cpp", "DWARFDebugLine.cpp", "DWARFDebugLoc.cpp", "DWARFDebugMacro.cpp", "DWARFDebugPubTable.cpp", "DWARFDebugRangeList.cpp", "DWARFDebugRnglists.cpp", "DWARFDie.cpp", "DWARFExpression.cpp", "DWARFFormValue.cpp", "DWARFGdbIndex.cpp", "DWARFListTable.cpp", "DWARFTypeUnit.cpp", "DWARFUnitIndex.cpp", "DWARFUnit.cpp", "DWARFVerifier.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/DebugInfo/DWARF", "/root/include/llvm/DebugInfo")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "MSF")
    ctx.add_llvm_library(ctx, "LLVMDebugInfoMSF", "MappedBlockStream.cpp", "MSFBuilder.cpp", "MSFCommon.cpp", "MSFError.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/DebugInfo/MSF")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "CodeView")
    ctx.add_llvm_library(ctx, "LLVMDebugInfoCodeView", "AppendingTypeTableBuilder.cpp", "CodeViewError.cpp", "CodeViewRecordIO.cpp", "ContinuationRecordBuilder.cpp", "CVSymbolVisitor.cpp", "CVTypeVisitor.cpp", "DebugChecksumsSubsection.cpp", "DebugCrossExSubsection.cpp", "DebugCrossImpSubsection.cpp", "DebugFrameDataSubsection.cpp", "DebugInlineeLinesSubsection.cpp", "DebugLinesSubsection.cpp", "DebugStringTableSubsection.cpp", "DebugSubsection.cpp", "DebugSubsectionRecord.cpp", "DebugSubsectionVisitor.cpp", "DebugSymbolRVASubsection.cpp", "DebugSymbolsSubsection.cpp", "EnumTables.cpp", "Formatters.cpp", "GlobalTypeTableBuilder.cpp", "LazyRandomTypeCollection.cpp", "Line.cpp", "MergingTypeTableBuilder.cpp", "RecordName.cpp", "RecordSerialization.cpp", "SimpleTypeSerializer.cpp", "StringsAndChecksums.cpp", "SymbolRecordMapping.cpp", "SymbolDumper.cpp", "SymbolSerializer.cpp", "TypeDumpVisitor.cpp", "TypeIndex.cpp", "TypeIndexDiscovery.cpp", "TypeHashing.cpp", "TypeRecordMapping.cpp", "TypeStreamMerger.cpp", "TypeTableCollection.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/DebugInfo/CodeView")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "PDB")
    ctx.add_llvm_library(ctx, "LLVMDebugInfoPDB", "GenericError.cpp", "IPDBSourceFile.cpp", "PDB.cpp", "PDBContext.cpp", "PDBExtras.cpp", "PDBInterfaceAnchors.cpp", "PDBSymbol.cpp", "PDBSymbolAnnotation.cpp", "PDBSymbolBlock.cpp", "PDBSymbolCompiland.cpp", "PDBSymbolCompilandDetails.cpp", "PDBSymbolCompilandEnv.cpp", "PDBSymbolCustom.cpp", "PDBSymbolData.cpp", "PDBSymbolExe.cpp", "PDBSymbolFunc.cpp", "PDBSymbolFuncDebugEnd.cpp", "PDBSymbolFuncDebugStart.cpp", "PDBSymbolLabel.cpp", "PDBSymbolPublicSymbol.cpp", "PDBSymbolThunk.cpp", "PDBSymbolTypeArray.cpp", "PDBSymbolTypeBaseClass.cpp", "PDBSymbolTypeBuiltin.cpp", "PDBSymbolTypeCustom.cpp", "PDBSymbolTypeDimension.cpp", "PDBSymbolTypeEnum.cpp", "PDBSymbolTypeFriend.cpp", "PDBSymbolTypeFunctionArg.cpp", "PDBSymbolTypeFunctionSig.cpp", "PDBSymbolTypeManaged.cpp", "PDBSymbolTypePointer.cpp", "PDBSymbolTypeTypedef.cpp", "PDBSymbolTypeUDT.cpp", "PDBSymbolTypeVTable.cpp", "PDBSymbolTypeVTableShape.cpp", "PDBSymbolUnknown.cpp", "PDBSymbolUsingNamespace.cpp", "PDBSymDumper.cpp", "UDTLayout.cpp", "", "ADDITIONAL_HEADER_DIRS", "")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Symbolize")
    ctx.add_llvm_library(ctx, "LLVMSymbolize", "DIPrinter.cpp", "SymbolizableObjectFile.cpp", "Symbolize.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/DebugInfo/Symbolize")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "ExecutionEngine")
    ctx.add_llvm_library(ctx, "LLVMExecutionEngine", "ExecutionEngine.cpp", "ExecutionEngineBindings.cpp", "GDBRegistrationListener.cpp", "SectionMemoryManager.cpp", "TargetSelect.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/ExecutionEngine", "DEPENDS", "intrinsics_gen")
    ctx = ctx.push_directory(ctx, "Interpreter")
    ctx.add_llvm_library(ctx, "LLVMInterpreter", "Execution.cpp", "ExternalFunctions.cpp", "Interpreter.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "MCJIT")
    ctx.add_llvm_library(ctx, "LLVMMCJIT", "MCJIT.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Orc")
    ctx.add_llvm_library(ctx, "LLVMOrcJIT", "CompileOnDemandLayer.cpp", "Core.cpp", "ExecutionUtils.cpp", "IndirectionUtils.cpp", "IRCompileLayer.cpp", "IRTransformLayer.cpp", "Legacy.cpp", "Layer.cpp", "LLJIT.cpp", "NullResolver.cpp", "ObjectTransformLayer.cpp", "OrcABISupport.cpp", "OrcCBindings.cpp", "OrcError.cpp", "OrcMCJITReplacement.cpp", "RPCUtils.cpp", "RTDyldObjectLinkingLayer.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/ExecutionEngine/Orc", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "RuntimeDyld")
    ctx.add_llvm_library(ctx, "LLVMRuntimeDyld", "JITSymbol.cpp", "RTDyldMemoryManager.cpp", "RuntimeDyld.cpp", "RuntimeDyldChecker.cpp", "RuntimeDyldCOFF.cpp", "RuntimeDyldELF.cpp", "RuntimeDyldMachO.cpp", "Targets/RuntimeDyldELFMips.cpp", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Target")
    ctx.add_llvm_library(ctx, "LLVMTarget", "Target.cpp", "TargetIntrinsicInfo.cpp", "TargetLoweringObjectFile.cpp", "TargetMachine.cpp", "TargetMachineC.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Target")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "AsmParser")
    ctx.add_llvm_library(ctx, "LLVMAsmParser", "LLLexer.cpp", "LLParser.cpp", "Parser.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Analysis", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "LineEditor")
    ctx.add_llvm_library(ctx, "LLVMLineEditor", "LineEditor.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/LineEditor", "LINK_LIBS", "LLVMSupport", "")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "ProfileData")
    ctx.add_llvm_library(ctx, "LLVMProfileData", "GCOV.cpp", "InstrProf.cpp", "InstrProfReader.cpp", "InstrProfWriter.cpp", "ProfileSummaryBuilder.cpp", "SampleProf.cpp", "SampleProfReader.cpp", "SampleProfWriter.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/ProfileData", "DEPENDS", "intrinsics_gen")
    ctx = ctx.push_directory(ctx, "Coverage")
    ctx.add_llvm_library(ctx, "LLVMCoverage", "CoverageMapping.cpp", "CoverageMappingWriter.cpp", "CoverageMappingReader.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/ProfileData/Coverage", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Passes")
    ctx.add_llvm_library(ctx, "LLVMPasses", "PassBuilder.cpp", "PassPlugin.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Passes", "DEPENDS", "intrinsics_gen")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "ToolDrivers")
    ctx = ctx.push_directory(ctx, "llvm-dlltool")
    ctx.set(ctx, "LLVM_TARGET_DEFINITIONS", "Options.td")
    ctx.tablegen(ctx, "LLVM", "Options.inc", "-gen-opt-parser-defs")
    ctx.add_public_tablegen_target(ctx, "DllOptionsTableGen")
    ctx.add_llvm_library(ctx, "LLVMDlltoolDriver", "DlltoolDriver.cpp")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "llvm-lib")
    ctx.set(ctx, "LLVM_TARGET_DEFINITIONS", "Options.td")
    ctx.tablegen(ctx, "LLVM", "Options.inc", "-gen-opt-parser-defs")
    ctx.add_public_tablegen_target(ctx, "LibOptionsTableGen")
    ctx.add_llvm_library(ctx, "LLVMLibDriver", "LibDriver.cpp")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)

    #    ctx = ctx.push_directory(ctx, "XRay")
    #    ctx.add_llvm_library(ctx, "LLVMXRay", "InstrumentationMap.cpp", "Trace.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/ADT", "/root/include/llvm/XRay", "DEPENDS", "LLVMSupport", "LLVMObject", "LINK_LIBS", "LLVMSupport", "LLVMObject")
    #ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "Testing")
    ctx = ctx.push_directory(ctx, "Support")
    ctx.add_llvm_library(ctx, "LLVMTestingSupport", "Error.cpp", "BUILDTREE_ONLY", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/Testing/Support", "LINK_COMPONENTS", "Support")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.push_directory(ctx, "WindowsManifest")
    ctx.set(ctx, "system_libs")
    ctx.add_llvm_library(ctx, "LLVMWindowsManifest", "WindowsManifestMerger.cpp", "ADDITIONAL_HEADER_DIRS", "/root/include/llvm/WindowsManifest", "", "LINK_LIBS", "")
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    ctx = ctx.pop_directory(ctx)
    return ctx
