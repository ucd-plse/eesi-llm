// Protobuf messages related to long-running operations.
// This is a modified verison of google.longrunning from
// the googleapis repo.

syntax = "proto3";

package error_specifications;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

// Copy of google.rpc.Status
import "proto/status.proto";
// import "status.proto";

// Operations service for handling getting service operations, deleting
// service operations, and cancelling service operations.
service OperationsService {
  // Gets the latest state of a long-running operation.  Clients can use this
  // method to poll the operation result at intervals as recommended by the API
  // service.
  rpc GetOperation(GetOperationRequest) returns (Operation);

  // Deletes the result of an already-finished operation.
  rpc DeleteOperation(DeleteOperationRequest) returns (Operation);

  // Cancels a running operation
  rpc CancelOperation(CancelOperationRequest) returns (google.protobuf.Empty);
}

// This resource represents a long-running operation that is the result of a
// network API call.
message Operation {
  // The server-assigned name, which is only unique within the same service
  // that originally returns it.
  string name = 1;

  // Service-specific metadata associated with the operation.
  // Progress information is included here
  google.protobuf.Any metadata = 2;

  // If the value is `false`, it means the operation is still in progress.
  // If `true`, the operation is completed, and either `error` or
  // `response` is available.
  bool done = 3;

  // The operation result, which can be either an `error` or a valid `response`.
  // If `done` == `false`, neither `error` nor `response` is set.
  // If `done` == `true`, exactly one of `error` or `response` is set.
  oneof result {
    // The error result of the operation in case of failure or cancellation.
    google.rpc.Status error = 4;

    // The normal response of the operation in case of success.
    google.protobuf.Any response = 5;
  }

  // Required. The message name of the primary return type for this operation
  string response_type = 6;

  // Required. The message name of the metadata type for this operation
  string metadata_type = 7;
}

// Request for getting an operation that a service may be executing.
message GetOperationRequest {
  // The name of the operation resource.
  string name = 1;
}

// Request for deleting an operation that a service has finished running.
message DeleteOperationRequest {
  // The name of the operation to be deleted.
  string name = 1;
}

// Request for cancelling operations that a service may executing.
message CancelOperationRequest {
  // The name of the operation to be canceled.
  string name = 1;
}

// Handles are attached to resources and point to which service
// is handling the resource.
message Handle {
  // The unique identifier of the resource.
  string id = 1;

  // For requests, the server to retrieve the resource from.
  // This should be set to the address of the server that returned the
  // Handle. It is up to the client to set this field.
  string authority = 2;
}

// Enumeration representing possible URI schemes that can be used by
// varying services.
enum Scheme {
  // The default invalid scheme.
  SCHEME_INVALID = 0;
  // Scheme typically used for local files, using
  // the format "file://".
  SCHEME_FILE = 1;
  // Scheme for Google Cloud Storage, using the
  // format "gs://".
  SCHEME_GS = 2;
}

// URI (Uniform Resource Identifier) message for identifying where
// resources used by the services are coming from. URIs are represented
// in the form <scheme>://<authority>/<path>
message Uri {
  // The relevant URI scheme, defined as an enumeration,
  // associated with the resource.
  Scheme scheme = 1;
  // The authority related to the resource.
  string authority = 2;
  // The path to the resource.
  string path = 3;
}

